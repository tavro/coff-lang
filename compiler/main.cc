#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "./parser/ast.hh"
#include "./parser/parser.hh"

using namespace std;

extern int error_count;
extern bool yydebug;

bool assembler_trace = false;
bool assembler = true;

bool print_ast = false;
bool print_quads = false;

bool type_check = true;

bool optimize = true;
bool quads = true;

void usage(char *program_name) {
    cerr << "Usage:\n"
         << program_name << " [-flag(s)] <file>\n"
         << program_name << " [-h]\n"
         << "Options:\n"
         << "  -h: print this help message\n"
         << "  -a: print abstract syntax tree\n"
         << "  -c: disable type checking\n"
         << "  -d: turn on parser debugging\n"
         << "  -f: turn off optimization\n"
         << "  -p: do not generate quadruples\n"
         << "  -q: print quad lists\n"
         << "  -s: do not generate assembler code\n"
         << "  -t: include traces in assembler code\n"
         << "  -y: print symbol table\n";
    exit(1);
}

int main(int argc, char **argv) {
    char options[] = "acdfpqstyh";
    int option;
    bool print_symtab = false;

    extern FILE *yyin;

    while ((option = getopt(argc, argv, options)) != EOF) {
        switch (option) {
            case 'a':
                cout << "an AST will be printed for each block\n";
                print_ast = true;
                break;
            case 'c':
                cout << "no type checking will be performed\n";
                type_check = false;
                break;
            case 'd':
                cout << "parser debugging turned on\n";
                yydebug = true;
                break;
            case 'f':
                cout << "no optimization will be performed\n";
                optimize = false;
                break;
            case 'p':
                cout << "no quadruples will be generated\n";
                quads = false;
                break;
            case 'q':
                cout << "quad lists will be printed for each block\n";
                print_quads = true;
                break;
            case 's':
                cout << "no assembler code will be generated\n";
                assembler = false;
                break;
            case 't':
                cout << "assembler code will contain quad labels\n";
                assembler_trace = true;
                break;
            case 'y':
                cout << "symbol table will be printed after compilation\n";
                print_symtab = true;
                break;
            case 'h':
            default:
                usage(argv[0]);
                break;
        }
    }

    if (optind > argc || optind < argc - 1) {
        usage(argv[0]);
    }
    else if (optind == argc) {
        yyin = stdin;
    }
    else {
        yyin = fopen(argv[optind], "r");
        if (yyin == NULL) {
            perror(argv[optind]);
            exit(1);
        }
    }

    /*
    start compilation
    generated by bison from parser.y
    */
    yyparse();

    if(print_symtab) {
        sym_tab->print(2);
        sym_tab->print(1);
    }
    exit(error_count);
}